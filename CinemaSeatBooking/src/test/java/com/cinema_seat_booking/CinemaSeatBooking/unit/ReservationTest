package com.cinema_seat_booking.service;

import com.cinema_seat_booking.model.*;
import com.cinema_seat_booking.repository.PaymentRepository;
import com.cinema_seat_booking.repository.ReservationRepository;
import com.cinema_seat_booking.repository.SeatRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ReservationServiceTest {

    @Mock
    private ReservationRepository reservationRepository;

    @Mock
    private PaymentService paymentService;

    @Mock
    private PaymentRepository paymentRepository;

    @Mock
    private SeatRepository seatRepository;

    @InjectMocks
    private ReservationService reservationService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testCreateReservation() {
        User user = new User();
        Screening screening = new Screening();
        Seat seat = new Seat();
        seat.setReserved(false);

        Reservation reservation = new Reservation(user, screening, seat);
        when(seatRepository.save(seat)).thenReturn(seat);
        when(reservationRepository.save(any(Reservation.class))).thenReturn(reservation);

        Reservation createdReservation = reservationService.createReservation(user, screening, seat, "Credit Card");

        assertNotNull(createdReservation);
        assertEquals(ReservationState.PENDING, createdReservation.getReservationState());
        verify(seatRepository).save(seat);
        verify(reservationRepository).save(any(Reservation.class));
    }

    @Test
    void testCancelReservation() {
        Long reservationId = 1L;
        Seat seat = new Seat();
        seat.setReserved(true);

        Reservation reservation = new Reservation();
        reservation.setSeat(seat);

        when(reservationRepository.findById(reservationId)).thenReturn(Optional.of(reservation));

        reservationService.cancelReservation(reservationId);

        verify(seatRepository).save(seat);
        verify(reservationRepository).delete(reservation);
        assertFalse(seat.isReserved());
    }

    @Test
    void testMakePayment() {
        Long reservationId = 1L;
        Reservation reservation = new Reservation();
        Payment payment = new Payment("Credit Card", 100.0, "2025-04-05");
        payment.setStatus(PaymentStatus.COMPLETED);

        when(reservationRepository.findById(reservationId)).thenReturn(Optional.of(reservation));
        when(paymentService.processPayment(reservation, "Credit Card", 100.0, "2025-04-05")).thenReturn(payment);
        when(paymentRepository.save(payment)).thenReturn(payment);
        when(reservationRepository.save(reservation)).thenReturn(reservation);

        
        Payment processedPayment = reservationService.makePayment(reservationId, "Credit Card", 100.0, "2025-04-05");

        
        assertNotNull(processedPayment);
        assertEquals(PaymentStatus.COMPLETED, processedPayment.getStatus());
        verify(paymentRepository).save(payment);
        verify(reservationRepository).save(reservation);
        assertEquals(payment, reservation.getPayment());
    }

    @Test
    void testCreateReservation_SeatAlreadyReserved() {
        
        User user = new User();
        Screening screening = new Screening();
        Seat seat = new Seat();
        seat.setReserved(true);

        
        IllegalStateException exception = assertThrows(IllegalStateException.class, () ->
            reservationService.createReservation(user, screening, seat, "Credit Card")
        );
        assertEquals("Seat null is already reserved!", exception.getMessage());
        verify(seatRepository, never()).save(seat);
        verify(reservationRepository, never()).save(any(Reservation.class));
    }
}