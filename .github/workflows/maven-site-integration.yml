name: Maven Site & All Tests

on:
  push:
    branches:
      - '**'
  schedule:
    - cron: '0 18-23/2 * * *'  # 20:00–01:00 CET
    - cron: '0 0-6/2 * * *'    # 02:00–08:00 CET

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: cinema_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL..."
          until mysqladmin ping -h 127.0.0.1 -uroot -proot --silent; do
            sleep 2
          done

      - name: Run DB initialization script
        run: |
          echo "Creating schema if needed..."
          mysql -h 127.0.0.1 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS cinema_db;"

      - name: Run Unit Tests
        run: mvn test -Punit
        working-directory: ./CinemaSeatBooking

      - name: Run Integration Tests
        run: mvn verify -Pintegration
        working-directory: ./CinemaSeatBooking

      - name: Generate Maven Site
        run: mvn site
        working-directory: ./CinemaSeatBooking
      - name: Deploy to gh-pages branch
          run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          COMMIT_HASH=$(git rev-parse --short HEAD)

          # Obtener gh-pages
          git fetch origin gh-pages
          git worktree add gh-pages gh-pages

          # Limpiar contenido anterior
          rm -rf gh-pages/*

          # Crear estructura esperada
          mkdir -p gh-pages/docs
          mkdir -p gh-pages/target/reports
          mkdir -p gh-pages/target/site/jacoco

          # Copiar archivos generados
          cp -r docs/html/* gh-pages/docs/
          cp -r target/reports/* gh-pages/target/reports/
          cp -r target/site/jacoco/* gh-pages/target/site/jacoco/

          # Copiar el index.html del root del proyecto
          cp index.html gh-pages/index.html

          # Hacer commit y push
          cd gh-pages
          git add .
          git commit -m "Update GitHub Pages with latest dashboard and reports from $COMMIT_HASH"
          git push origin gh-pages